{"version":3,"sources":["app/App.js","serviceWorker.js","index.js","app/App.module.scss"],"names":["getX","radius","angular","x","Math","cos","PI","console","log","getY","y","sin","renderBlock","app","texture","block","PIXI","interactive","buttonMode","anchor","set","scale","on","onDragStart","onDragEnd","onDragMove","onClick","stage","addChild","event","data","this","alpha","dragging","newPosition","getLocalPosition","parent","App","width","height","antialias","transparent","resolution","autoResize","backgroundColor","document","getElementById","appendChild","view","fromImage","baseTexture","scaleMode","NEAREST","screen","react_default","a","createElement","id","className","styles","canvas","Component","Boolean","window","location","hostname","match","ReactDOM","render","app_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8OAsCA,SAASA,EAAKC,EAAQC,GACpB,IAAMC,EAAIF,EAASG,KAAKC,IAAID,KAAKE,GAAKJ,EAAS,KAE/C,OADAK,QAAQC,IAAIL,EAAG,KACRA,EAGT,SAASM,EAAKR,EAAQC,GACpB,IAAMQ,EAAIT,EAASG,KAAKO,IAAIP,KAAKE,GAAKJ,EAAU,KAEhD,OADAK,QAAQC,IAAIE,EAAG,KACRA,EAGT,SAASE,EAAYC,EAAKC,EAASX,EAAGO,GAEpC,IAAMK,EAAQ,IAAIC,SAAYF,GAG9BC,EAAME,aAAc,EAGpBF,EAAMG,YAAa,EAGnBH,EAAMI,OAAOC,IAAI,IAGjBL,EAAMM,MAAMD,IAAI,IAGhBL,EACGO,GAAG,cAAeC,GAClBD,GAAG,YAAaE,GAChBF,GAAG,mBAAoBE,GACvBF,GAAG,cAAeG,GAClBH,GAAG,cAAeI,GAIrBX,EAAMZ,EAAIA,EACVY,EAAML,EAAIA,EAGVG,EAAIc,MAAMC,SAASb,GAGrB,SAASW,EAAQG,GACftB,QAAQC,IAAIqB,EAAMC,MAGpB,SAASP,EAAYM,GAInBE,KAAKD,KAAOD,EAAMC,KAClBC,KAAKC,MAAQ,GACbD,KAAKE,UAAW,EAGlB,SAAST,IACPO,KAAKC,MAAQ,EACbD,KAAKE,UAAW,EAEhBF,KAAKD,KAAO,KAGd,SAASL,IACP,GAAIM,KAAKE,SAAU,CACjB,IAAIC,EAAcH,KAAKD,KAAKK,iBAAiBJ,KAAKK,QAClDL,KAAK5B,EAAI+B,EAAY/B,EACrB4B,KAAKrB,EAAIwB,EAAYxB,GAIV2B,kMAzGX,IAAMxB,EAAM,IAAIG,cAAiB,CAC/BsB,MAAO,IACPC,OAAQ,IACRC,WAAW,EACXC,aAAa,EACbC,WAAY,EACZC,YAAY,EACZC,gBAAiB,aAEnBC,SAASC,eAAe,QAAQC,YAAYlC,EAAImC,MAEhD,IAAMlC,EAAUE,UAAaiC,UAAU,cAEvCnC,EAAQoC,YAAYC,UAAYnC,cAAiBoC,QACjD,IAAMnD,EAASY,EAAIwC,OAAOf,MAAQ,EAClC/B,QAAQC,IAAIP,EAAQ,UACpB,IAAK,IAAIC,EAAU,EAAGA,EAAU,IAAKA,GAAW,GAC9CK,QAAQC,IAAIN,GACZU,EACEC,EACAC,EACA,IAAMd,EAAKC,EAAQC,GACnB,IAAMO,EAAKR,EAAQC,qCAMvB,OAAOoD,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAWC,IAAOC,gBA9B1BC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASxB,SAASC,eAAe,SD0H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkBjB,OAAA","file":"static/js/main.1b38413b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styles from \"./App.module.scss\";\nimport * as PIXI from \"pixi.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    const app = new PIXI.Application({\n      width: 800,\n      height: 800,\n      antialias: true,\n      transparent: false,\n      resolution: 1,\n      autoResize: true,\n      backgroundColor: \"0x1099bb\"\n    });\n    document.getElementById(\"pixi\").appendChild(app.view);\n    // texture\n    const texture = PIXI.Texture.fromImage(\"/block.png\");\n    // Scale mode for pixelation\n    texture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\n    const radius = app.screen.width / 4;\n    console.log(radius, \"radius\");\n    for (let angular = 0; angular < 360; angular += 45) {\n      console.log(angular);\n      renderBlock(\n        app,\n        texture,\n        400 + getX(radius, angular),\n        400 + getY(radius, angular)\n      );\n    }\n  }\n\n  render() {\n    return <div id=\"pixi\" className={styles.canvas} />;\n  }\n}\n\nfunction getX(radius, angular) {\n  const x = radius * Math.cos(Math.PI * angular/ 180);\n  console.log(x, \"x\");\n  return x;\n}\n\nfunction getY(radius, angular) {\n  const y = radius * Math.sin(Math.PI * angular / 180);\n  console.log(y, \"y\");\n  return y;\n}\n\nfunction renderBlock(app, texture, x, y) {\n  // create our little block friend..\n  const block = new PIXI.Sprite(texture);\n\n  // enable the block to be interactive... this will allow it to respond to mouse and touch events\n  block.interactive = true;\n\n  // this button mode will mean the hand cursor appears when you roll over the block with your mouse\n  block.buttonMode = true;\n\n  // center the block's anchor point\n  block.anchor.set(0.5);\n\n  // make it a bit bigger, so it's easier to grab\n  block.scale.set(0.2);\n\n  // drag\n  block\n    .on(\"pointerdown\", onDragStart)\n    .on(\"pointerup\", onDragEnd)\n    .on(\"pointerupoutside\", onDragEnd)\n    .on(\"pointermove\", onDragMove)\n    .on(\"pointerdown\", onClick)\n  ;\n\n  // move the sprite to its designated position\n  block.x = x;\n  block.y = y;\n\n  // add it to the stage\n  app.stage.addChild(block);\n}\n\nfunction onClick(event) {\n  console.log(event.data);\n}\n\nfunction onDragStart(event) {\n  // store a reference to the data\n  // the reason for this is because of multitouch\n  // we want to track the movement of this particular touch\n  this.data = event.data;\n  this.alpha = 0.5;\n  this.dragging = true;\n}\n\nfunction onDragEnd() {\n  this.alpha = 1;\n  this.dragging = false;\n  // set the interaction data to null\n  this.data = null;\n}\n\nfunction onDragMove() {\n  if (this.dragging) {\n    var newPosition = this.data.getLocalPosition(this.parent);\n    this.x = newPosition.x;\n    this.y = newPosition.y;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"App_canvas__luRP-\"};"],"sourceRoot":""}